package com.henry.image_detector.services;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.testng.Assert.assertEquals;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoSession;
import org.mockito.quality.Strictness;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.henry.image_detector.client.ImageDetectionClient;
import com.henry.image_detector.client.ImageDownloadClient;
import com.henry.image_detector.client.beans.GetTagsResponse;
import com.henry.image_detector.client.beans.UploadImageFileResponse;
import com.henry.image_detector.dto.ImageDto;
import com.henry.image_detector.exception.ImageNotFoundException;
import com.henry.image_detector.mapper.ImageMapper;
import com.henry.image_detector.mapper.ImageMapperImpl;
import com.henry.image_detector.repository.DetectedObjectRepository;
import com.henry.image_detector.repository.ImageRepository;
import com.henry.image_detector.repository.entity.DetectedObjectEntity;
import com.henry.image_detector.repository.entity.ImageEntity;

public class ImageServiceTest {
	@Mock
	private ImageDetectionClient imageDetectionClient;
	@Mock
	private ImageDownloadClient imageDownloadClient;
	@Mock
	private ImageRepository imageRepository;
	@Mock
	private DetectedObjectRepository detectedObjectRepository;

	private final ImageMapper imageMapper = new ImageMapperImpl();

	private MockitoSession mockito;

	@BeforeMethod
	public void setup() {
		mockito = Mockito.mockitoSession()
				.initMocks(this)
				.strictness(Strictness.STRICT_STUBS)
				.startMocking();
	}

	@AfterMethod
	public void teardown() {
		mockito.finishMocking();
	}

	@Test
	public void testGetImage() {
		ImageService imageService = new ImageService(imageDetectionClient, imageDownloadClient, imageRepository, detectedObjectRepository, imageMapper);

		UUID imageId = UUID.randomUUID();
		ImageEntity imageEntity = new ImageEntity.Builder()
				.withUuid(imageId)
				.withWidth(1920)
				.withHeight(1080)
				.withSize(9999)
				.withType(1).build();
		Optional<ImageEntity> foundImage = Optional.of(imageEntity);

		when(imageRepository.findById(imageId)).thenReturn(foundImage);

		ImageDto imageDto = imageService.getImage(imageId);
		verify(imageRepository, times(1)).findById(imageId);
		assertEquals(imageDto.getUuid(), imageId);
		assertEquals(imageDto.getWidth(), 1920);
		assertEquals(imageDto.getHeight(), 1080);
		assertEquals(imageDto.getSize(), 9999);
		assertEquals(imageDto.getType(), 1);
	}

	@Test(expectedExceptions = ImageNotFoundException.class)
	public void testGetImageNotFound() {
		ImageService imageService = new ImageService(imageDetectionClient, imageDownloadClient, imageRepository, detectedObjectRepository, imageMapper);

		UUID imageId = UUID.randomUUID();
		Optional<ImageEntity> foundImage = Optional.empty();
		when(imageRepository.findById(imageId)).thenReturn(foundImage);
		imageService.getImage(imageId);
	}

	@Test
	public void testGetImages() {
		ImageService imageService = new ImageService(imageDetectionClient, imageDownloadClient, imageRepository, detectedObjectRepository, imageMapper);

		List<ImageEntity> imageEntities = new ArrayList<>();
		UUID horseImageId = UUID.randomUUID();
		ImageEntity horseImage = new ImageEntity.Builder()
				.withUuid(horseImageId)
				.withName("horseImage")
				.withHeight(1920)
				.withHeight(1080)
				.withType(1)
				.build();
		imageEntities.add(horseImage);

		UUID catImageId = UUID.randomUUID();
		ImageEntity catImage = new ImageEntity.Builder()
				.withUuid(catImageId)
				.withName("catImage")
				.withHeight(1920)
				.withHeight(1080)
				.withType(1)
				.build();
		imageEntities.add(catImage);

		when(imageRepository.findAll()).thenReturn(imageEntities);

		List<ImageDto> imageDtos = imageService.getImages(StringUtils.EMPTY);
		verify(imageRepository, times(1)).findAll();
		assertEquals(imageDtos.size(), 2);
		assertEquals(imageDtos.get(0).getUuid(), horseImageId);
		assertEquals(imageDtos.get(1).getUuid(), catImageId);
	}

	@Test
	public void testGetImagesHorseObjects() {
		ImageService imageService = new ImageService(imageDetectionClient, imageDownloadClient, imageRepository, detectedObjectRepository, imageMapper);

		List<ImageEntity> imageEntities = new ArrayList<>();
		UUID horseImageId = UUID.randomUUID();
		ImageEntity horseImage = new ImageEntity.Builder()
				.withUuid(horseImageId)
				.withName("horseImage")
				.withHeight(1920)
				.withHeight(1080)
				.withType(1)
				.build();
		imageEntities.add(horseImage);

		List<String> objectQuery = new ArrayList<>();
		objectQuery.add("horse");

		when(imageRepository.findImagesByDetectedObjectNames(objectQuery)).thenReturn(imageEntities);

		List<ImageDto> imageDtos = imageService.getImages("horse");
		verify(imageRepository, times(1)).findImagesByDetectedObjectNames(eq(objectQuery));
		assertEquals(imageDtos.size(), 1);
		assertEquals(imageDtos.get(0).getUuid(), horseImageId);
	}

	@Test
	public void testDetectAndSaveImageObjectsBase64() {
		ImageService imageService = new ImageService(imageDetectionClient, imageDownloadClient, imageRepository, detectedObjectRepository, imageMapper);

		ImageDto imageDto = new ImageDto();
		imageDto.setDataType("jpg");
		imageDto.setData(
				"/9j/4AAQSkZJRgABAQEBLAEsAAD/4QBzRXhpZgAASUkqAAgAAAADAA4BAgApAAAAMgAAABoBBQABAAAAWwAAABsBBQABAAAAYwAAAAAAAABCYXkgaG9yc2UgY2xvc2UgdXAgb24gc3VtbWVyIHllbGxvdyBmaWVsZCwBAAABAAAALAEAAAEAAAD/4QW0aHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIj4KCTxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CgkJPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczpJcHRjNHhtcENvcmU9Imh0dHA6Ly9pcHRjLm9yZy9zdGQvSXB0YzR4bXBDb3JlLzEuMC94bWxucy8iICAgeG1sbnM6R2V0dHlJbWFnZXNHSUZUPSJodHRwOi8veG1wLmdldHR5aW1hZ2VzLmNvbS9naWZ0LzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGx1cz0iaHR0cDovL25zLnVzZXBsdXMub3JnL2xkZi94bXAvMS4wLyIgIHhtbG5zOmlwdGNFeHQ9Imh0dHA6Ly9pcHRjLm9yZy9zdGQvSXB0YzR4bXBFeHQvMjAwOC0wMi0yOS8iIHhtbG5zOnhtcFJpZ2h0cz0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3JpZ2h0cy8iIHBob3Rvc2hvcDpDcmVkaXQ9IkdldHR5IEltYWdlcy9pU3RvY2twaG90byIgR2V0dHlJbWFnZXNHSUZUOkFzc2V0SUQ9IjE0Njk0MTM0NDUiIHhtcFJpZ2h0czpXZWJTdGF0ZW1lbnQ9Imh0dHBzOi8vd3d3LmlzdG9ja3Bob3RvLmNvbS9sZWdhbC9saWNlbnNlLWFncmVlbWVudD91dG1fbWVkaXVtPW9yZ2FuaWMmYW1wO3V0bV9zb3VyY2U9Z29vZ2xlJmFtcDt1dG1fY2FtcGFpZ249aXB0Y3VybCIgcGx1czpEYXRhTWluaW5nPSJodHRwOi8vbnMudXNlcGx1cy5vcmcvbGRmL3ZvY2FiL0RNSS1QUk9ISUJJVEVELUVYQ0VQVFNFQVJDSEVOR0lORUlOREVYSU5HIiA+CjxkYzpjcmVhdG9yPjxyZGY6U2VxPjxyZGY6bGk+TmVteXJpdnNreWkgIFZpYWNoZXNsYXY8L3JkZjpsaT48L3JkZjpTZXE+PC9kYzpjcmVhdG9yPjxkYzpkZXNjcmlwdGlvbj48cmRmOkFsdD48cmRmOmxpIHhtbDpsYW5nPSJ4LWRlZmF1bHQiPkJheSBob3JzZSBjbG9zZSB1cCBvbiBzdW1tZXIgeWVsbG93IGZpZWxkPC9yZGY6bGk+PC9yZGY6QWx0PjwvZGM6ZGVzY3JpcHRpb24+CjxwbHVzOkxpY2Vuc29yPjxyZGY6U2VxPjxyZGY6bGkgcmRmOnBhcnNlVHlwZT0nUmVzb3VyY2UnPjxwbHVzOkxpY2Vuc29yVVJMPmh0dHBzOi8vd3d3LmlzdG9ja3Bob3RvLmNvbS9waG90by9saWNlbnNlLWdtMTQ2OTQxMzQ0NS0/dXRtX21lZGl1bT1vcmdhbmljJmFtcDt1dG1fc291cmNlPWdvb2dsZSZhbXA7dXRtX2NhbXBhaWduPWlwdGN1cmw8L3BsdXM6TGljZW5zb3JVUkw+PC9yZGY6bGk+PC9yZGY6U2VxPjwvcGx1czpMaWNlbnNvcj4KCQk8L3JkZjpEZXNjcmlwdGlvbj4KCTwvcmRmOlJERj4KPC94OnhtcG1ldGE+Cjw/eHBhY2tldCBlbmQ9InciPz4K/+0AhFBob3Rvc2hvcCAzLjAAOEJJTQQEAAAAAABnHAJQABdOZW15cml2c2t5aSAgVmlhY2hlc2xhdhwCeAApQmF5IGhvcnNlIGNsb3NlIHVwIG9uIHN1bW1lciB5ZWxsb3cgZmllbGQcAm4AGEdldHR5IEltYWdlcy9pU3RvY2twaG90bwD/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9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");
		imageDto.setObjectDetection(true);

		ImageEntity savedImage = new ImageEntity();
		when(imageRepository.save(any())).thenReturn(savedImage);

		UploadImageFileResponse uploadImageFileResponse = new UploadImageFileResponse();
		UploadImageFileResponse.Result uploadResult = new UploadImageFileResponse.Result();
		uploadResult.setUploadId(UUID.randomUUID().toString());
		uploadImageFileResponse.setResult(uploadResult);
		when(imageDetectionClient.uploadImageFile(any())).thenReturn(uploadImageFileResponse);

		GetTagsResponse getTagsResponse = new GetTagsResponse();
		GetTagsResponse.Result tagsResult = new GetTagsResponse.Result();
		List<GetTagsResponse.TagConfidence> tags = new ArrayList<>();
		GetTagsResponse.TagConfidence tagConfidence = new GetTagsResponse.TagConfidence();
		tagConfidence.setConfidence(1.0);
		GetTagsResponse.Tag tag = new GetTagsResponse.Tag();
		tag.setEn("horse");
		tagConfidence.setTag(tag);
		tags.add(tagConfidence);
		tagsResult.setTags(tags);
		getTagsResponse.setResult(tagsResult);
		when(imageDetectionClient.getTagsId(any())).thenReturn(getTagsResponse);

		when(detectedObjectRepository.save(any())).thenReturn(new DetectedObjectEntity());

		imageService.detectAndSaveImageObjects(imageDto);

		verify(imageRepository, times(1)).save(any());
		verify(imageDetectionClient, times(1)).uploadImageFile(any());
		verify(imageDetectionClient, times(1)).getTagsId(any());
		verify(detectedObjectRepository, times(1)).save(any());
	}

	@Test
	public void testDetectAndSaveImageObjectsUrl() {
		ImageService imageService = new ImageService(imageDetectionClient, imageDownloadClient, imageRepository, detectedObjectRepository, imageMapper);

		ImageDto imageDto = new ImageDto();
		imageDto.setUrl("https://www.test.com/test.jpg");
		imageDto.setObjectDetection(true);

		File testFile = new File("test.txt");

		try (FileWriter writer = new FileWriter(testFile)) {
			writer.write("Hello, World!");
		} catch (IOException ignored) {}

		when(imageDownloadClient.downloadImage(any(), any())).thenReturn(testFile);

		ImageEntity savedImage = new ImageEntity();
		when(imageRepository.save(any())).thenReturn(savedImage);

		GetTagsResponse getTagsResponse = new GetTagsResponse();
		GetTagsResponse.Result tagsResult = new GetTagsResponse.Result();
		List<GetTagsResponse.TagConfidence> tags = new ArrayList<>();
		GetTagsResponse.TagConfidence tagConfidence = new GetTagsResponse.TagConfidence();
		tagConfidence.setConfidence(1.0);
		GetTagsResponse.Tag tag = new GetTagsResponse.Tag();
		tag.setEn("horse");
		tagConfidence.setTag(tag);
		tags.add(tagConfidence);
		tagsResult.setTags(tags);
		getTagsResponse.setResult(tagsResult);
		when(imageDetectionClient.getTagsUrl(any())).thenReturn(getTagsResponse);

		when(detectedObjectRepository.save(any())).thenReturn(new DetectedObjectEntity());

		imageService.detectAndSaveImageObjects(imageDto);

		verify(imageDownloadClient, times(1)).downloadImage(any(), any());
		verify(imageRepository, times(1)).save(any());
		verify(imageDetectionClient, times(1)).getTagsUrl(any());
		verify(detectedObjectRepository, times(1)).save(any());
		testFile.delete();
	}

	@Test
	public void testSaveImageMetadataOnlyUrl() {
		ImageService imageService = new ImageService(imageDetectionClient, imageDownloadClient, imageRepository, detectedObjectRepository, imageMapper);

		ImageDto imageDto = new ImageDto();
		imageDto.setUrl("https://www.test.com/test.jpg");
		imageDto.setObjectDetection(false);

		File testFile = new File("test.txt");

		try (FileWriter writer = new FileWriter(testFile)) {
			writer.write("Hello, World!");
		} catch (IOException ignored) {}

		when(imageDownloadClient.downloadImage(any(), any())).thenReturn(testFile);

		ImageEntity savedImage = new ImageEntity();
		when(imageRepository.save(any())).thenReturn(savedImage);

		GetTagsResponse getTagsResponse = new GetTagsResponse();
		GetTagsResponse.Result tagsResult = new GetTagsResponse.Result();
		List<GetTagsResponse.TagConfidence> tags = new ArrayList<>();
		GetTagsResponse.TagConfidence tagConfidence = new GetTagsResponse.TagConfidence();
		tagConfidence.setConfidence(1.0);
		GetTagsResponse.Tag tag = new GetTagsResponse.Tag();
		tag.setEn("horse");
		tagConfidence.setTag(tag);
		tags.add(tagConfidence);
		tagsResult.setTags(tags);
		getTagsResponse.setResult(tagsResult);
		when(imageDetectionClient.getTagsUrl(any())).thenReturn(getTagsResponse);

		imageService.detectAndSaveImageObjects(imageDto);

		verify(imageDownloadClient, times(1)).downloadImage(any(), any());
		verify(imageRepository, times(1)).save(any());
		verify(imageDetectionClient, times(1)).getTagsUrl(any());
		verify(detectedObjectRepository, times(0)).save(any());
		testFile.delete();
	}

}
